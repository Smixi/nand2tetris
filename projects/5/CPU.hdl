// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //instruction:
    //A Instruction
    //0 vvv vvvv vvvv vvvv

    // Destination register logic
    And(a=instruction[5], b=instruction[15], out=aRegDest);
    And(a=instruction[4], b=instruction[15], out=dRegDest);
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Choose when we load data for A register
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=aRegDest, out=aRegLoad);
    Mux16(a[0..14]=instruction[0..14],a[15]=false, b=ALUOut, sel=aRegDest, out=aRegIn);
    Register(in=aRegIn, load=aRegLoad, out=aRegOut, out[0..14]=addressM, out[0..14]=iAddressM);

    And(a=instruction[12], b=instruction[15], out=mRegComp);
    Mux16(a=aRegOut, b=inM, sel=mRegComp, out=ALUInY);

    //C instruction
    // 1  1  1  a  c1  c2  c3 c4 c5 c6 d1  d2  d3  j1 j2 j3
    // 15 14 13 12 11  10  9  8  7  6  5A  4D  3M  2  1  0

    // Choose when we load data for D register
    Register(in=ALUOut, load=dRegDest, out=dRegOut, out=ALUInX);

    // 0 = Zx & !XNx & Zy & !Ny & !no
    // ... we see that it map to c instruction order ...

    ALU(x=ALUInX, y=ALUInY, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, zr=ALUZr, ng=ALUNg,
        out=outM);

    //Instruction decoding for Jump instruction
    And(a=instruction[2], b=ALUNg, out=jumpNegativ);
    And(a=instruction[1], b=ALUZr, out=jumpZero);
    
    //Positiv is non null and non negative
    Not(in=ALUZr, out=nzr);
    Not(in=ALUNg, out=nng);
    And(a=nng, b=nzr, out=positive);
    And(a=instruction[0], b=positive, out=jumpPositiv);

    Or(a=jumpNegativ, b=jumpZero, out=partialJump);
    Or(a=partialJump, b=jumpPositiv, out=jumpCond);
    // Only jump on instruction 
    And(a=jumpCond, b=instruction[15], out=jump);
    Not(in=jump, out=noJump);
    PC(in[15]=false, in[0..14]=iAddressM ,load=jump, inc=noJump, reset=reset, out[0..14]=pc);
}
